* Cerbtora
#+html: <img src="logo.png" width="300px" align="right"/>
[[https://github.com/Froleyks/cerbtora][Cerbtora]] checks the correctness of witnesses in the [[https://github.com/hwmcc/btor2tools][Btor2]] format.

** Quickstart
#+begin_src sh
git clone https://github.com/Froleyks/cerbtora
cd cerbtora
cmake -DCMAKE_BUILD_TYPE=Release -DTOOLS=ON -B build
make -j$(nproc) -C build
./build/bin/check examples/model.btor2 examples/witness.btor2

#expected usage: ./<your_model_checker> <model> <witness>
./build/bin/fuzzer ./<your_model_checker>
#+end_src
** Motivation
Model checking is an essential technique for hardware design.
For unsafe designs, those that violate the property being checked, it is usually easy to produce a trace to demonstrate the flaw.
In cases where the model checking succeeds, a certificate should be produced that proves the property indeed holds for all possible traces.
We propose /witness circuits/ as a format for these certificates.
A witness circuit generalizes the concept of an inductive invariant.

Instead of searching for an inductive invariant in the model itself, we find a different circuit -- the witness -- that simulates part of the model and has an inductive invariant.
** Witness circuits
To check if a witness circuit is valid for a given model, Cerbtora performs five checks:
| Reset      | R{K} \wedge C \Rightarrow R'{K} \wedge C'              |
| Transition | F{K} \wedge C0 \wedge C1 \wedge C0' \Rightarrow F'{K} \wedge C1' |
| Property   | (C \wedge C') \Rightarrow (P \Rightarrow P')                |
| Base       | R' \wedge C' \Rightarrow P'                       |
| Step       | P0' \wedge F' \wedge C0' \wedge C1' \Rightarrow P1'         |
Where $R$ encodes that states are in their reset, $C$ is the conjunction of all constraints, $P$ is the property, i.e., all bads are 0, and $F$ encodes that the states of the "1" copy are equal to the nexts of the "0" copy. When $F$ is used the other formulas have a temporal index. {K} means that the formula is limited to $K$, which is the set of inputs and states shared between model and witness.

If a witness and model pass the first three checks, the witness is said to simulate the model.
The last two check the inductiveness of the property in the witness circuit.

The validity of these formulas is checked by encoding their negation into combinatorial Btor2, and checking unsatisfiability with [[https://github.com/bitwuzla/bitwuzla.git][Bitwuzla]].
** Witness Format
Witness circuits are normal Btor2 files.

Both the Reset and Transition checks are defined on the intersection between model and witness $K$.
Requiring the witness circuit to keep the same ids for $K$ would lead to gaps or limit the witness circuits that can be constructed.
Instead, the witness can store an explicit mapping of its inputs and latches to the simulated  in the model in its symbol table.
Other information may be stored, but for elements of $K$ the /name/ must start with '=' followed by the simulated literal in the model.
#+begin_example
1 sort bitvec 1
2 zero 1
3 state 1 =8
4 init 1 3 2
5 next 1 3 3
6 bad 3
#+end_example
If no mapping information is found, Cerbtora assumes that
the first $n$ inputs in the model are simulated by the first $n$ inputs in the witness, and the first $m$ states by the first $m$ states in the witness.
Checkout the [[https://github.com/Froleyks/cerbtora/blob/main/examples][examples]] directory.
** References
The theory this tool is based on is detailed in our papers.
Beyond that, we demonstrate how to certify the combination of different preprocessing techniques and model checking algorithms with witness circuits.
| Progress in Certifying Hardware Model Checking Results      | Yu, Biere & Heljanko        | CAV21   |
| Stratified Certification for K-Induction                    | Yu, Froleyks & Biere et al. | FMCAD22 |
| Towards Compositional Hardware Model Checking Certification | Yu, Froleyks & Biere et al. | FMCAD23 |
| Certifying Phase Abstraction                                | Froleyks, Yu & Biere et al. | IJCAR24 |
** Build
Cerbtora itself depends on make, cmake, a c++ compiler, and git to fetch the btor2tools dependency.
With cmake -DTOOLS=ON additional tools are built, namely fuzzbtor2 and the bitvector SMT solver bitwuzla. The latter brings the additional dependencies of meson and m4.

A static Cerbtora binary can be built with cmake -DSTATIC=ON.

Checkout the Dockerfile for more details or directly run the container:

#+begin_src sh
docker build -t cerbtora .
docker run --rm cerbtora examples/model.btor2 examples/witness.btor2
#+end_src
** Scripts
In addition to Cerbtora, the TOOLS option builds a number of useful scripts in the build/bin directory:
- check <model> <witness> :: checks the first line of the witness to decide if it is a Btor2 model to certify safety or a Btor2 trace to certify unsafety. Then runs Cerbtora and bitwuzla or btorsim respectively.
- generate [seed] :: Produces a random Btor2 model. Ensures that it is compatible with the current version of btor2sim.
- certified <model checker> <model> :: Runs the model checker and checks the produced certificate. The model checker is expected to take the first argument as the model path and write a (sat or unsat) certificate to the path provided in the second argument.
- fuzzer <model checker> [threads] :: Executes the model checker on random Btor2 models in multiple threads and checks the produced certificates. Error inducing models are collected in build/bugs.
